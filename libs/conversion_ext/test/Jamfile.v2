#
# Boost.Conversion
# Build script for tests.
#
# Copyright (c) 2008-2009 Vicente J. Botet Escriba]
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

using testing ;

if ! $(BOOST_ROOT)
{
    BOOST_ROOT = [ modules.peek : BOOST_ROOT ] ;
}

# bjam -V2 threading=multi target-os=cygwin threadapi=pthread variant=debug

project :
    : requirements
        <library>/boost/system//boost_system
        <library>/boost/chrono//boost_chrono

        <toolset>msvc:<asynch-exceptions>on
        <define>BOOST_ENABLE_WARNINGS
        <warnings>all
        <toolset>gcc:<cxxflags>-Wextra
        <toolset>gcc:<cxxflags>-pedantic
        <toolset>gcc:<cxxflags>-Wno-long-long
        <toolset>darwin:<cxxflags>-Wextra
        <toolset>darwin:<cxxflags>-pedantic
        <toolset>darwin:<cxxflags>-Wno-long-long
        #<toolset>pathscale:<cxxflags>-Wextra
        <toolset>pathscale:<cxxflags>-Wno-long-long
        <toolset>pathscale:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wextra
        <toolset>clang:<cxxflags>-pedantic
        <toolset>clang:<cxxflags>-Wno-long-long
        <toolset>gcc-mingw-4.5.0:<cxxflags>-Wno-missing-field-initializers
        <toolset>gcc-mingw-4.5.0:<cxxflags>-fdiagnostics-show-option
        <toolset>msvc:<cxxflags>/wd4127
        <toolset>msvc:<cxxflags>/wd4244
        <toolset>msvc:<cxxflags>-D_SCL_SECURE_NO_WARNINGS

;


test-suite "type_traits" :
     [ run is_assignable.cpp ]
     [ compile is_constructible.cpp ]
     [ compile is_copy_assignable.cpp ]
     [ compile is_copy_constructible.cpp ]
     [ compile is_explicitly_convertible.cpp ]
     [ compile is_extrinsic_assignable.cpp ]
     [ compile is_convertible.cpp ]
     [ compile is_extrinsic_convertible.cpp ]
    ;


test-suite "conversion" :
     [ run builtins.cpp ]
     [ run intrinsec.cpp ]
     [ run extrinsec.cpp ]
     [ run pair.cpp ]
     #[ run complex.cpp ]
     [ run string.cpp ]
     [ run vector.cpp ]
     [ run interval.cpp ]
     [ run rational.cpp ]
     [ run optional.cpp ]
     [ run array.cpp ]
     [ run tuple.cpp ]
     [ run chrono_posix_time_time.cpp ]
     [ run chrono_posix_time_duration.cpp ]
    ;


test-suite "example" :
     [ run ../example/even.cpp ]
     [ run ../example/swap.cpp ]
     [ run ../example/no_throw.cpp ]
     [ run ../example/fallback.cpp ]
     [ run ../example/overload.cpp ]
     [ run ../example/formatted.cpp ]
    ;


test-suite "compile_fail_test"  :
#    [ compile-fail ../example/IL_BancAccount.cpp : : <define>BOOST_SYNCHRO_DO_NOT_COMPILE  : IL_BancAccount_comp_fail ]
    ;

